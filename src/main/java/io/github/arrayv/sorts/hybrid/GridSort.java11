package io.github.arrayv.sorts.hybrid;

import io.github.arrayv.main.ArrayVisualizer;
import io.github.arrayv.sortdata.SortMeta;
import io.github.arrayv.sorts.merge.UpdatedQuadSort;
import io.github.arrayv.sorts.templates.Sort;

// gridsort 1.2.1.3 - Igor van den Hoven ivdhoven@gmail.com, Java version by smaybius
@SortMeta(name = "Grid")
public class GridSort extends Sort {

    public GridSort(ArrayVisualizer arrayVisualizer) {
        super(arrayVisualizer);
    }

    private final int BSC_X = 32;
    private int BSC_Z;

    private final UpdatedQuadSort quadsort = new UpdatedQuadSort(arrayVisualizer);

    class x_node {
        int[] swap;
        int y_size;
        int y;
        int[] y_base;
        y_node[] y_axis;
    }

    class y_node {
        int z_size;
        int[] z_axis1;
        int[] z_axis2;
    }

    private void head_branchless_merge(int[] dest, int ptd, int[] left, int ptl, int[] right, int ptr) {
        Writes.write(dest, ptd++, Reads.compareValues(left[ptl], right[ptr]) <= 0 ? left[ptl++] : right[ptr++], 1, true,
                true);
    }

    private void tail_branchless_merge(int[] dest, int tpd, int[] left, int tpl, int[] right, int tpr) {
        Writes.write(dest, tpd--, Reads.compareValues(left[tpl], right[tpr]) > 0 ? left[tpl--] : right[tpr--], 1, true,
                true);
    }

    private x_node create_grid(int[] array, int nmemb) {
        x_node x_nodule = new x_node();
        y_node y_nodule;

        for (BSC_Z = BSC_X; BSC_Z * BSC_Z / 4 < nmemb; BSC_Z *= 4)
            ;
        x_nodule.swap = Writes.createExternalArray(BSC_Z);
        x_nodule.y_base = Writes.createExternalArray(BSC_Z);
        x_nodule.y_axis = new y_node[BSC_Z];
        Writes.changeAllocAmount(BSC_Z);

        quadsort.quadSortSwap(array, x_nodule.swap, 0, 0, BSC_Z * 2, BSC_Z * 2);

        for (int cnt = 0; cnt < 2; cnt++) {
            y_nodule = new y_node();
            y_nodule.z_axis1 = new int[BSC_Z];
            Writes.arraycopy(array, cnt * BSC_Z, y_nodule.z_axis1, 0, BSC_Z, 0, false, true);

            y_nodule.z_axis2 = new int[BSC_Z];
            y_nodule.z_size = 0;
            x_nodule.y_axis[cnt] = y_nodule;
            Writes.write(x_nodule.y_base, cnt, y_nodule.z_axis1[0], 0, false, true);
            arrayVisualizer.getArrays().add(x_nodule.y_axis[cnt].z_axis1);
            arrayVisualizer.getArrays().add(x_nodule.y_axis[cnt].z_axis2);
            arrayVisualizer.updateNow();
        }
        x_nodule.y_size = 2;
        x_nodule.y = 0;
        return x_nodule;
    }

    // used by destroy_grid

    // y_node->z_axis1 should be sorted and of BSC_Z size.
    // y_node->z_axis2 should be unsorted and of y_node->z_size size.

    private void twin_merge_cpy(x_node x_nodule, int[] dest, int dest_start, y_node y_nodule) {
        int ptl = 0, ptr = 0;
        int nmemb1 = BSC_Z, nmemb2 = y_nodule.z_size;
        int tpl = nmemb1 - 1, tpr = nmemb2 - 1;
        int ptd = dest_start;
        int tpd = dest_start + nmemb1 + nmemb2 - 1;
        int loop;
        boolean x, y;

        quadsort.quadSortSwap(y_nodule.z_axis2, x_nodule.swap, ptr, 0, nmemb2, nmemb2);

        init: while (true) {
            if (tpl - ptl > 8) {
                ptl8_ptr: while (true) {
                    if (Reads.compareValues(y_nodule.z_axis1[ptl + 7], y_nodule.z_axis2[ptr]) <= 0) {
                        Writes.arraycopy(y_nodule.z_axis1, ptl, dest, dest_start + ptd, 8, 1, false, true);
                        ptd += 8;
                        ptl += 8;
                        if (tpl - ptl > 8)
                            continue ptl8_ptr;
                        continue init;
                    }
                    break ptl8_ptr;
                }
                tpl8_tpr: while (true) {
                    if (Reads.compareValues(y_nodule.z_axis1[tpl - 7], y_nodule.z_axis2[tpr]) > 0) {
                        tpd -= 7;
                        tpl -= 7;
                        Writes.arraycopy(y_nodule.z_axis1, tpl--, dest, dest_start + tpd--, 8, 1, false, true);
                        if (tpl - ptl > 8)
                            continue tpl8_tpr;
                        continue init;
                    }
                    break tpl8_tpr;
                }
            }

            if (tpr - ptr > 8) {
                ptl_ptr8: while (true) {
                    if (Reads.compareValues(y_nodule.z_axis1[ptl], y_nodule.z_axis2[ptr + 7]) > 0) {
                        Writes.arraycopy(y_nodule.z_axis2, ptr, dest, dest_start + ptd, 8, 1, false, true);
                        ptd += 8;
                        ptr += 8;
                        if (tpr - ptr > 8)
                            continue ptl_ptr8;
                        continue init;
                    }
                    break ptl_ptr8;
                }
                tpl_tpr8: while (true) {
                    if (Reads.compareValues(y_nodule.z_axis1[tpl], y_nodule.z_axis2[tpr - 7]) <= 0) {
                        tpd -= 7;
                        tpr -= 7;
                        Writes.arraycopy(y_nodule.z_axis2, tpr--, dest, dest_start + tpd--, 8, 1, false, true);
                        if (tpr - ptr > 8)
                            continue tpl_tpr8;
                        continue init;
                    }
                    break tpl_tpr8;
                }
            }
            if (tpd - ptd < 16) {
                break;
            }
            loop = 8;
            do {
                head_branchless_merge(dest, dest_start + ptd, y_nodule.z_axis1, ptl, y_nodule.z_axis2, ptr);
                tail_branchless_merge(dest, dest_start + tpd, y_nodule.z_axis1, tpl, y_nodule.z_axis2, tpr);
            } while (--loop > 0);
        }

        while (tpl - ptl > 1 && tpr - ptr > 1) {
            if (Reads.compareValues(y_nodule.z_axis1[ptl + 1], y_nodule.z_axis2[ptr]) <= 0) {
                Writes.write(dest, dest_start + ptd++, y_nodule.z_axis1[ptl++], 1, false, true);
                Writes.write(dest, dest_start + ptd++, y_nodule.z_axis1[ptl++], 1, false, true);
            } else if (Reads.compareValues(y_nodule.z_axis1[ptl], y_nodule.z_axis2[ptr + 1]) > 0) {
                Writes.write(dest, dest_start + ptd++, y_nodule.z_axis2[ptr++], 1, false, true);
                Writes.write(dest, dest_start + ptd++, y_nodule.z_axis2[ptr++], 1, false, true);
            } else {
                x = Reads.compareValues(y_nodule.z_axis1[ptl], y_nodule.z_axis2[ptr]) <= 0;
                y = !x;
                Writes.write(dest, dest_start + ptd + (x ? 1 : 0), y_nodule.z_axis2[ptr], 1, true, true);
                ptr++;
                Writes.write(dest, dest_start + ptd + (y ? 1 : 0), y_nodule.z_axis1[ptl], 1, true, true);
                ptl++;
                ptd += 2;

                x = Reads.compareValues(y_nodule.z_axis1[ptl], y_nodule.z_axis2[ptr]) <= 0;
                y = !x;
                Writes.write(dest, dest_start + ptd + (x ? 1 : 0), y_nodule.z_axis2[ptr], 1, true, true);
                ptr += y ? 1 : 0;
                Writes.write(dest, dest_start + ptd + (y ? 1 : 0), y_nodule.z_axis1[ptl], 1, true, true);
                ptl += x ? 1 : 0;
                ptd++;
            }
        }

        while (ptl <= tpl && ptr <= tpr)
            Writes.write(dest, dest_start + ptd++,
                    Reads.compareValues(y_nodule.z_axis1[ptl], y_nodule.z_axis2[ptr]) <= 0 ? y_nodule.z_axis1[ptl++]
                            : y_nodule.z_axis2[ptr++],
                    1, true, true);
        while (ptl <= tpl)
            Writes.write(dest, dest_start + ptd++, y_nodule.z_axis1[ptl++], 1, true, true);
        while (ptr <= tpr)
            Writes.write(dest, dest_start + ptd++, y_nodule.z_axis2[ptr++], 1, true, true);
    }

    private void parity_twin_merge(int[] left, int ptl, int[] right, int ptr, int[] dest, int ptd, int[] dest_tail,
            int tpd, int block) {
        int tpl = ptl + block - 1, tpr = ptr + block - 1;

        for (block--; block > 0; block--) {
            head_branchless_merge(dest, ptd, left, ptl, right, ptr);
            tail_branchless_merge(dest_tail, tpd, left, tpl, right, tpr);
        }
        Writes.write(dest, ptd, Reads.compareValues(left[ptl], right[ptr]) <= 0 ? left[ptl] : right[ptr], 1, true,
                true);
        Writes.write(dest_tail, tpd, Reads.compareValues(left[tpl], right[tpr]) > 0 ? left[tpl] : right[tpr], 1, true,
                true);
    }

    // merge two sorted arrays across two buckets
    // [AB][AB] --> [AA][ ] + [BB][ ]

    private void twin_merge(x_node x_nodule, y_node y_node1, y_node y_node2) {
        quadsort.quadSortSwap(y_node1.z_axis2, x_nodule.swap, 0, 0, BSC_Z, BSC_Z);
        int pta = 0, ptb = 0;
        int tpa = pta + BSC_Z - 1;
        int tpb = ptb + BSC_Z - 1;
        int[] pts;

        if (Reads.compareValues(y_node1.z_axis1[tpa], y_node1.z_axis2[ptb]) <= 0) {
            pts = y_node1.z_axis2;
            y_node1.z_axis2 = y_node2.z_axis1;
            y_node2.z_axis1 = pts;
            return;
        }

        if (Reads.compareValues(y_node1.z_axis1[pta], y_node1.z_axis2[tpb]) > 0) {
            pts = y_node1.z_axis1;
            y_node1.z_axis1 = y_node1.z_axis2;
            y_node1.z_axis2 = y_node2.z_axis1;
            y_node2.z_axis1 = pts;
            return;
        }

        parity_twin_merge(y_node1.z_axis1, pta, y_node1.z_axis2, ptb, y_node2.z_axis2, 0, y_node2.z_axis1, BSC_Z - 1,
                BSC_Z);

        pts = y_node1.z_axis1;
        y_node1.z_axis1 = y_node2.z_axis2;
        y_node2.z_axis2 = pts;
    }

    private void destroy_grid(x_node x_nodule, int[] array) {
        int y, z;
        y_node y_nodule;

        for (y = z = 0; y < x_nodule.y_size; y++) {
            y_nodule = x_nodule.y_axis[y];
            if (y_nodule.z_size > 0)
                twin_merge_cpy(x_nodule, array, z, y_nodule);
            else
                Writes.arraycopy(y_nodule.z_axis1, 0, array, z, BSC_Z, 1, true, false);
            z += BSC_Z + y_nodule.z_size;

            Writes.deleteExternalArrays(y_nodule.z_axis1, y_nodule.z_axis2);
        }
        Writes.deleteExternalArrays(x_nodule.y_base, x_nodule.swap);
    }

    int run;

    private int adaptive_binary_search(x_node x_nodule, int[] array, int start, int key) {
        int top = start, mid, base = start;
        boolean monobound = false;
        while (true) {
            if (run == 0) {
                top = x_nodule.y_size;
                monobound = true;
                break;
            }

            if (x_nodule.y == x_nodule.y_size - 1) {
                if (Reads.compareValues(array[base + x_nodule.y], key) <= 0)
                    return x_nodule.y;
                top = x_nodule.y;
                monobound = true;
                break;
            }

            if (x_nodule.y == 0) {
                base++;
                if (Reads.compareValues(array[base], key) > 0)
                    return 0;
                top = x_nodule.y_size - 1;
                monobound = true;
                break;
            }

            base += x_nodule.y;

            if (Reads.compareValues(array[base], key) <= 0) {
                if (Reads.compareValues(array[base + 1], key) > 0)
                    break;
                base++;
                top = x_nodule.y_size - x_nodule.y - 1;
            } else {
                base--;
                if (Reads.compareValues(array[base], key) <= 0)
                    break;
                top = x_nodule.y - 1;
                base = start;
            }
            monobound = true;
            break;
        }
        if (monobound) {
            while (top > 1) {
                mid = top / 2;
                if (Reads.compareValues(array[base + mid], key) <= 0)
                    base += mid;
                top -= mid;
            }
        }
        top = base - start;
        run = x_nodule.y = top;
        return x_nodule.y = top;
    }

    private void insert_y_node(x_node x_nodule, int y) {
        int end = ++x_nodule.y_size;

        if (x_nodule.y_size % BSC_Z == 0) {
            Writes.deleteExternalArray(x_nodule.y_base);
            x_nodule.y_base = Writes.createExternalArray(x_nodule.y_size + BSC_Z);
            Writes.changeAllocAmount(-x_nodule.y_axis.length);
            x_nodule.y_axis = new y_node[x_nodule.y_size + BSC_Z];
            Writes.changeAllocAmount(x_nodule.y_size + BSC_Z);
        }

        while (y < --end) {
            x_nodule.y_axis[end] = x_nodule.y_axis[end - 1];
            Writes.write(x_nodule.y_base, end, x_nodule.y_base[end - 1], 1, true, true);
        }
        x_nodule.y_axis[y] = new y_node();
        if (x_nodule.y_axis[y].z_axis1 != null && x_nodule.y_axis[y].z_axis2 != null)
            Writes.deleteExternalArrays(x_nodule.y_axis[y].z_axis1, x_nodule.y_axis[y].z_axis2);
        x_nodule.y_axis[y].z_axis1 = Writes.createExternalArray(BSC_Z);
        x_nodule.y_axis[y].z_axis2 = Writes.createExternalArray(BSC_Z);
    }

    private void split_y_node(x_node x_nodule, int y1, int y2) {

        insert_y_node(x_nodule, y2);
        y_node y_node1 = x_nodule.y_axis[y1], y_node2 = x_nodule.y_axis[y2];
        twin_merge(x_nodule, y_node1, y_node2);

        y_node1.z_size = y_node2.z_size = 0;

        Writes.write(x_nodule.y_base, y1, y_node1.z_axis1[0], 1, true, true);
        Writes.write(x_nodule.y_base, y2, y_node2.z_axis1[0], 1, true, true);
    }

    private void insert_z_node(x_node x_nodule, int key) {
        int y;

        y = adaptive_binary_search(x_nodule, x_nodule.y_base, 0, key);
        y_node y_nodule = x_nodule.y_axis[y];
        Writes.write(y_nodule.z_axis2, y_nodule.z_size++, key, 1, true, true);

        if (y_nodule.z_size == BSC_Z)
            split_y_node(x_nodule, y, y + 1);
    }

    @Override
    public void runSort(int[] array, int sortLength, int bucketCount) throws Exception {
        int cnt = sortLength, pta = 0;
        x_node grid = create_grid(array, cnt);

        pta += BSC_Z * 2;
        cnt -= BSC_Z * 2;

        while (cnt-- > 0)
            insert_z_node(grid, array[pta++]);
        destroy_grid(grid, array);
    }

}
