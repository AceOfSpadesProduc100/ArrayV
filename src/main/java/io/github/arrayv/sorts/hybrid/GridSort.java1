package io.github.arrayv.sorts.hybrid;

import io.github.arrayv.main.ArrayVisualizer;
import io.github.arrayv.sortdata.SortMeta;
import io.github.arrayv.sorts.merge.UpdatedQuadSort;
import io.github.arrayv.sorts.templates.Sort;

// gridsort 1.2.1.3 - Igor van den Hoven ivdhoven@gmail.com, Java version by smaybius
@SortMeta(name = "Grid")
public class GridSort extends Sort {

    public GridSort(ArrayVisualizer arrayVisualizer) {
        super(arrayVisualizer);
    }

    private final int BSC_X = 32;
    private int BSC_Z;

    private final UpdatedQuadSort quadsort = new UpdatedQuadSort(arrayVisualizer);

    class x_node {
        int[] swap;
        int y_size;
        int y;
        int[] y_base;
        y_node[] y_axis;
    }

    class y_node {
        int z_size;
        int[] z_axis1;
        int[] z_axis2;
    }

    private void head_branchless_merge(int[] dest, int ptd, int[] left, int ptl, int[] right, int ptr) {
        Writes.write(dest, ptd++, Reads.compareValues(left[ptl], right[ptr]) <= 0 ? left[ptl++] : right[ptr++], 1, true,
                true);
    }

    private void tail_branchless_merge(int[] dest, int tpd, int[] left, int tpl, int[] right, int tpr) {
        Writes.write(dest, tpd--, Reads.compareValues(left[tpl], right[tpr]) > 0 ? left[tpl--] : right[tpr--], 1, true,
                true);
    }

    private x_node create_grid(int[] array, int nmemb) {
        x_node x_node = new x_node();
        y_node y_node;

        for (BSC_Z = BSC_X; BSC_Z * BSC_Z / 4 < nmemb; BSC_Z *= 4)
            ;

        x_node.swap = Writes.createExternalArray(BSC_Z * 2);
        x_node.y_base = Writes.createExternalArray(BSC_Z);
        x_node.y_axis = new y_node[BSC_Z];
        quadsort.quadSortSwap(array, x_node.swap, 0, 0, BSC_Z * 2, BSC_Z * 2);

        for (int cnt = 0; cnt < 2; cnt++) {
            y_node = new y_node();
            y_node.z_axis1 = Writes.createExternalArray(BSC_Z);
            Writes.arraycopy(array, cnt * BSC_Z, y_node.z_axis1, 0, BSC_Z, 1, true, true);

            y_node.z_axis2 = Writes.createExternalArray(BSC_Z);
            y_node.z_size = 0;
            x_node.y_axis[cnt] = y_node;
            Writes.write(x_node.y_base, cnt, y_node.z_axis1[0], 1, true, true);
        }
        x_node.y_size = 2;
        x_node.y = 0;
        return x_node;
    }

    private void twin_merge_cpy(x_node x_node, int[] dest, y_node y_node) {
        int ptl, ptr;
        int nmemb1 = BSC_Z, nmemb2 = y_node.z_size;
        int tpl = nmemb1 - 1, tpr = nmemb2 - 1, ptd, tpd = nmemb1 + nmemb2 - 1;
        int loop, x, y;

        quadsort.quadSortSwap(y_node.z_axis2, x_node.swap, ptr, 0, nmemb2, nmemb2);

        init: while (true) {
            if (tpl - ptl > 8) {

            }
        }
    }

    @Override
    public void runSort(int[] array, int sortLength, int bucketCount) throws Exception {
    }

}
